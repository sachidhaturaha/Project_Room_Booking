{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sachi\\\\Desktop\\\\Room_Booking_2\\\\react-frontend\\\\src\\\\screens\\\\Bookingscreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Bookingscreen() {\n  _s();\n  const [loading, setloading] = useState(true); // Initialized to true, assuming loading starts immediately\n  const [error, seterror] = useState(false); // Initialized to false\n  const [room, setroom] = useState(null); // Initialized to null for clarity\n\n  // Extract `roomid` from the URL parameters\n  const {\n    roomid\n  } = useParams();\n  useEffect(() => {\n    // Define an async function inside the useEffect\n    const fetchRoomDetails = async () => {\n      try {\n        const response = await axios.post('http://localhost:5000/api/rooms/getroombyid', {\n          roomid: roomid // Use `roomid` obtained from `useParams`\n        });\n        setroom(response.data);\n      } catch (error) {\n        console.error(error);\n        seterror(true);\n      } finally {\n        setloading(false);\n      }\n    };\n\n    // Call the async function\n    fetchRoomDetails();\n  }, [roomid]); // Add `roomid` as a dependency to re-fetch if it changes\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Error fetching room details.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Booking Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), room && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Room ID = \", roomid]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Bookingscreen, \"ExR8Folvhwmq6TXywT+10PmJ1tk=\", false, function () {\n  return [useParams];\n});\n_c = Bookingscreen;\nexport default Bookingscreen;\nvar _c;\n$RefreshReg$(_c, \"Bookingscreen\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","Bookingscreen","_s","loading","setloading","error","seterror","room","setroom","roomid","fetchRoomDetails","response","post","data","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sachi/Desktop/Room_Booking_2/react-frontend/src/screens/Bookingscreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nfunction Bookingscreen() {\r\n  const [loading, setloading] = useState(true); // Initialized to true, assuming loading starts immediately\r\n  const [error, seterror] = useState(false); // Initialized to false\r\n  const [room, setroom] = useState(null); // Initialized to null for clarity\r\n\r\n  // Extract `roomid` from the URL parameters\r\n  const { roomid } = useParams();\r\n\r\n  useEffect(() => {\r\n    // Define an async function inside the useEffect\r\n    const fetchRoomDetails = async () => {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/api/rooms/getroombyid', {\r\n          roomid: roomid // Use `roomid` obtained from `useParams`\r\n        });\r\n\r\n        setroom(response.data);\r\n      } catch (error) {\r\n        console.error(error);\r\n        seterror(true);\r\n      } finally {\r\n        setloading(false);\r\n      }\r\n    };\r\n\r\n    // Call the async function\r\n    fetchRoomDetails();\r\n  }, [roomid]); // Add `roomid` as a dependency to re-fetch if it changes\r\n\r\n  if (loading) {\r\n    return <h1>Loading...</h1>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h1>Error fetching room details.</h1>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Booking Screen</h1>\r\n      {room && <h1>Room ID = {roomid}</h1>} {/* Ensure `room` is not null before rendering */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bookingscreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC;EACA,MAAM;IAAEc;EAAO,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,6CAA6C,EAAE;UAC/EH,MAAM,EAAEA,MAAM,CAAC;QACjB,CAAC,CAAC;QAEFD,OAAO,CAACG,QAAQ,CAACE,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdS,OAAO,CAACT,KAAK,CAACA,KAAK,CAAC;QACpBC,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACAM,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,IAAIN,OAAO,EAAE;IACX,oBAAOH,OAAA;MAAAe,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC5B;EAEA,IAAId,KAAK,EAAE;IACT,oBAAOL,OAAA;MAAAe,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9C;EAEA,oBACEnB,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBZ,IAAI,iBAAIP,OAAA;MAAAe,QAAA,GAAI,YAAU,EAACN,MAAM;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV;AAACjB,EAAA,CA3CQD,aAAa;EAAA,QAMDJ,SAAS;AAAA;AAAAuB,EAAA,GANrBnB,aAAa;AA6CtB,eAAeA,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}